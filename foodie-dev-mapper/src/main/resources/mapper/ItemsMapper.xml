<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.imooc.mapper.ItemsMapper">

    <resultMap id="BaseResultMap" type="com.imooc.pojo.Items">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="item_name" jdbcType="VARCHAR" property="itemName"/>
        <result column="cat_id" jdbcType="INTEGER" property="catId"/>
        <result column="root_cat_id" jdbcType="INTEGER" property="rootCatId"/>
        <result column="sell_counts" jdbcType="INTEGER" property="sellCounts"/>
        <result column="on_off_status" jdbcType="INTEGER" property="onOffStatus"/>
        <result column="created_time" jdbcType="TIMESTAMP" property="createdTime"/>
        <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime"/>
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>

    <select id="selectItem" parameterType="Map" resultType="com.imooc.pojo.vo.SearchItemsVO">
        SELECT
        i.id as itemId,
        i.item_name as itemName,
        i.sell_counts as sellCounts,
        ii.url as imgUrl,
        tempSpec.price_discount as price
        FROM
        items i
        LEFT JOIN
        items_img ii
        on
        i.id = ii.item_id
        LEFT JOIN
        (SELECT item_id,MIN(price_discount) as price_discount from items_spec GROUP BY item_id) tempSpec
        on
        i.id = tempSpec.item_id
        WHERE
        ii.is_main = 1
        <if test=" paramsMap.keyword != null and paramsMap.keyword != '' ">
            AND i.item_name like '%${paramsMap.keyword}%'
        </if>
        order by
        <choose>
            <when test=" paramsMap.sort == &quot;c&quot; ">
                i.sell_counts desc
            </when>
            <when test=" paramsMap.sort == &quot;p&quot; ">
                tempSpec.price_discount asc
            </when>
            <otherwise>
                i.item_name asc
            </otherwise>
        </choose>
    </select>
    <!-- k: 默认，代表默认排序，根据name-->
    <!-- c: 根据销量排序-->
    <!-- p: 根据价格排序-->

    <select id="selectItemByThirdCategory" parameterType="Map" resultType="com.imooc.pojo.vo.SearchItemsVO">
        SELECT
        i.id as itemId,
        i.item_name as itemName,
        i.sell_counts as sellCounts,
        ii.url as imgUrl,
        tempSpec.price_discount as price
        FROM
        items i
        LEFT JOIN
        items_img ii
        on
        i.id = ii.item_id
        LEFT JOIN
        (SELECT item_id,MIN(price_discount) as price_discount from items_spec GROUP BY item_id) tempSpec
        on
        i.id = tempSpec.item_id
        WHERE
        ii.is_main = 1
        and i.cat_id = #{paramsMap.categoryId}
        order by
        <choose>
            <when test=" paramsMap.sort == &quot;c&quot; ">
                i.sell_counts desc
            </when>
            <when test=" paramsMap.sort == &quot;p&quot; ">
                tempSpec.price_discount asc
            </when>
            <otherwise>
                i.item_name asc
            </otherwise>
        </choose>
    </select>

    <select id="selectItemBySpecIdList" parameterType="List" resultType="com.imooc.pojo.vo.ShopCartVO">
        select t_items.id as itemId,
        t_items.item_name as itemName,
        t_items_img.url as itemImgUrl,
        t_items_spec.id as specId,
        t_items_spec.name as specName,
        t_items_spec.price_discount as priceDiscount,
        t_items_spec.price_normal as priceNormal
        from items_spec t_items_spec
        left join items t_items
        on t_items.id = t_items_spec.item_id
        left join items_img t_items_img
        on t_items_img.item_id = t_items.id
        where t_items_img.is_main = 1
        and t_items_spec.id
        in
        <foreach collection="specIdList" index="index" item="specId" open="(" separator="," close=")">
            #{specId}
        </foreach>
    </select>
    <update id="decreaseItemSpecStock" parameterType="Map">
        update items_spec
        set stock = stock - #{pendingCount}
        where id = #{specId}
        and stock >=  #{pendingCount}
    </update>
</mapper>